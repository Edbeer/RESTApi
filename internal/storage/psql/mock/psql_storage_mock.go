// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edbeer/restapi/internal/entity"
	utils "github.com/Edbeer/restapi/pkg/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthPsql is a mock of AuthPsql interface.
type MockAuthPsql struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPsqlMockRecorder
}

// MockAuthPsqlMockRecorder is the mock recorder for MockAuthPsql.
type MockAuthPsqlMockRecorder struct {
	mock *MockAuthPsql
}

// NewMockAuthPsql creates a new mock instance.
func NewMockAuthPsql(ctrl *gomock.Controller) *MockAuthPsql {
	mock := &MockAuthPsql{ctrl: ctrl}
	mock.recorder = &MockAuthPsqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPsql) EXPECT() *MockAuthPsqlMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAuthPsql) Delete(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthPsqlMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthPsql)(nil).Delete), ctx, userID)
}

// FindUserByEmail mocks base method.
func (m *MockAuthPsql) FindUserByEmail(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockAuthPsqlMockRecorder) FindUserByEmail(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockAuthPsql)(nil).FindUserByEmail), ctx, user)
}

// FindUsersByName mocks base method.
func (m *MockAuthPsql) FindUsersByName(ctx context.Context, name string, pq *utils.PaginationQuery) (*entity.UsersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByName", ctx, name, pq)
	ret0, _ := ret[0].(*entity.UsersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersByName indicates an expected call of FindUsersByName.
func (mr *MockAuthPsqlMockRecorder) FindUsersByName(ctx, name, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByName", reflect.TypeOf((*MockAuthPsql)(nil).FindUsersByName), ctx, name, pq)
}

// GetUserByID mocks base method.
func (m *MockAuthPsql) GetUserByID(ctx context.Context, userID uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthPsqlMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthPsql)(nil).GetUserByID), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockAuthPsql) GetUsers(ctx context.Context, pq *utils.PaginationQuery) (*entity.UsersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, pq)
	ret0, _ := ret[0].(*entity.UsersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAuthPsqlMockRecorder) GetUsers(ctx, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAuthPsql)(nil).GetUsers), ctx, pq)
}

// Register mocks base method.
func (m *MockAuthPsql) Register(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthPsqlMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthPsql)(nil).Register), ctx, user)
}

// Update mocks base method.
func (m *MockAuthPsql) Update(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthPsqlMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthPsql)(nil).Update), ctx, user)
}

// MockNewsPsql is a mock of NewsPsql interface.
type MockNewsPsql struct {
	ctrl     *gomock.Controller
	recorder *MockNewsPsqlMockRecorder
}

// MockNewsPsqlMockRecorder is the mock recorder for MockNewsPsql.
type MockNewsPsqlMockRecorder struct {
	mock *MockNewsPsql
}

// NewMockNewsPsql creates a new mock instance.
func NewMockNewsPsql(ctrl *gomock.Controller) *MockNewsPsql {
	mock := &MockNewsPsql{ctrl: ctrl}
	mock.recorder = &MockNewsPsqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsPsql) EXPECT() *MockNewsPsqlMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsPsql) Create(ctx context.Context, news *entity.News) (*entity.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, news)
	ret0, _ := ret[0].(*entity.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsPsqlMockRecorder) Create(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsPsql)(nil).Create), ctx, news)
}

// Delete mocks base method.
func (m *MockNewsPsql) Delete(ctx context.Context, newsID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, newsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNewsPsqlMockRecorder) Delete(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNewsPsql)(nil).Delete), ctx, newsID)
}

// GetNews mocks base method.
func (m *MockNewsPsql) GetNews(ctx context.Context, pq *utils.PaginationQuery) (*entity.NewsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", ctx, pq)
	ret0, _ := ret[0].(*entity.NewsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockNewsPsqlMockRecorder) GetNews(ctx, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockNewsPsql)(nil).GetNews), ctx, pq)
}

// GetNewsByID mocks base method.
func (m *MockNewsPsql) GetNewsByID(ctx context.Context, newsID uuid.UUID) (*entity.NewsBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByID", ctx, newsID)
	ret0, _ := ret[0].(*entity.NewsBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByID indicates an expected call of GetNewsByID.
func (mr *MockNewsPsqlMockRecorder) GetNewsByID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByID", reflect.TypeOf((*MockNewsPsql)(nil).GetNewsByID), ctx, newsID)
}

// SearchNews mocks base method.
func (m *MockNewsPsql) SearchNews(ctx context.Context, title string, pq *utils.PaginationQuery) (*entity.NewsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNews", ctx, title, pq)
	ret0, _ := ret[0].(*entity.NewsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchNews indicates an expected call of SearchNews.
func (mr *MockNewsPsqlMockRecorder) SearchNews(ctx, title, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNews", reflect.TypeOf((*MockNewsPsql)(nil).SearchNews), ctx, title, pq)
}

// Update mocks base method.
func (m *MockNewsPsql) Update(ctx context.Context, news *entity.News) (*entity.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, news)
	ret0, _ := ret[0].(*entity.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNewsPsqlMockRecorder) Update(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsPsql)(nil).Update), ctx, news)
}

// MockCommentsPsql is a mock of CommentsPsql interface.
type MockCommentsPsql struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsPsqlMockRecorder
}

// MockCommentsPsqlMockRecorder is the mock recorder for MockCommentsPsql.
type MockCommentsPsqlMockRecorder struct {
	mock *MockCommentsPsql
}

// NewMockCommentsPsql creates a new mock instance.
func NewMockCommentsPsql(ctrl *gomock.Controller) *MockCommentsPsql {
	mock := &MockCommentsPsql{ctrl: ctrl}
	mock.recorder = &MockCommentsPsqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsPsql) EXPECT() *MockCommentsPsqlMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentsPsql) Create(ctx context.Context, comments *entity.Comment) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comments)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentsPsqlMockRecorder) Create(ctx, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentsPsql)(nil).Create), ctx, comments)
}

// Delete mocks base method.
func (m *MockCommentsPsql) Delete(ctx context.Context, commentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentsPsqlMockRecorder) Delete(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentsPsql)(nil).Delete), ctx, commentID)
}

// GetAllByNewsID mocks base method.
func (m *MockCommentsPsql) GetAllByNewsID(ctx context.Context, newsID uuid.UUID, pq *utils.PaginationQuery) (*entity.CommentsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByNewsID", ctx, newsID, pq)
	ret0, _ := ret[0].(*entity.CommentsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByNewsID indicates an expected call of GetAllByNewsID.
func (mr *MockCommentsPsqlMockRecorder) GetAllByNewsID(ctx, newsID, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByNewsID", reflect.TypeOf((*MockCommentsPsql)(nil).GetAllByNewsID), ctx, newsID, pq)
}

// GetByID mocks base method.
func (m *MockCommentsPsql) GetByID(ctx context.Context, commentID uuid.UUID) (*entity.CommentBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, commentID)
	ret0, _ := ret[0].(*entity.CommentBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCommentsPsqlMockRecorder) GetByID(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCommentsPsql)(nil).GetByID), ctx, commentID)
}

// Update mocks base method.
func (m *MockCommentsPsql) Update(ctx context.Context, comments *entity.Comment) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, comments)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentsPsqlMockRecorder) Update(ctx, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentsPsql)(nil).Update), ctx, comments)
}
