// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edbeer/restapi/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockNewsRedis is a mock of NewsRedis interface.
type MockNewsRedis struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRedisMockRecorder
}

// MockNewsRedisMockRecorder is the mock recorder for MockNewsRedis.
type MockNewsRedisMockRecorder struct {
	mock *MockNewsRedis
}

// NewMockNewsRedis creates a new mock instance.
func NewMockNewsRedis(ctrl *gomock.Controller) *MockNewsRedis {
	mock := &MockNewsRedis{ctrl: ctrl}
	mock.recorder = &MockNewsRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsRedis) EXPECT() *MockNewsRedisMockRecorder {
	return m.recorder
}

// DeleteNewsCtx mocks base method.
func (m *MockNewsRedis) DeleteNewsCtx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsCtx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewsCtx indicates an expected call of DeleteNewsCtx.
func (mr *MockNewsRedisMockRecorder) DeleteNewsCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsCtx", reflect.TypeOf((*MockNewsRedis)(nil).DeleteNewsCtx), ctx, key)
}

// GetNewsByIDCtx mocks base method.
func (m *MockNewsRedis) GetNewsByIDCtx(ctx context.Context, key string) (*entity.NewsBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByIDCtx", ctx, key)
	ret0, _ := ret[0].(*entity.NewsBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByIDCtx indicates an expected call of GetNewsByIDCtx.
func (mr *MockNewsRedisMockRecorder) GetNewsByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByIDCtx", reflect.TypeOf((*MockNewsRedis)(nil).GetNewsByIDCtx), ctx, key)
}

// SetNewsCtx mocks base method.
func (m *MockNewsRedis) SetNewsCtx(ctx context.Context, key string, seconds int, news *entity.NewsBase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewsCtx", ctx, key, seconds, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewsCtx indicates an expected call of SetNewsCtx.
func (mr *MockNewsRedisMockRecorder) SetNewsCtx(ctx, key, seconds, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewsCtx", reflect.TypeOf((*MockNewsRedis)(nil).SetNewsCtx), ctx, key, seconds, news)
}

// MockAuthRedis is a mock of AuthRedis interface.
type MockAuthRedis struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRedisMockRecorder
}

// MockAuthRedisMockRecorder is the mock recorder for MockAuthRedis.
type MockAuthRedisMockRecorder struct {
	mock *MockAuthRedis
}

// NewMockAuthRedis creates a new mock instance.
func NewMockAuthRedis(ctrl *gomock.Controller) *MockAuthRedis {
	mock := &MockAuthRedis{ctrl: ctrl}
	mock.recorder = &MockAuthRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRedis) EXPECT() *MockAuthRedisMockRecorder {
	return m.recorder
}

// DeleteUserCtx mocks base method.
func (m *MockAuthRedis) DeleteUserCtx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserCtx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserCtx indicates an expected call of DeleteUserCtx.
func (mr *MockAuthRedisMockRecorder) DeleteUserCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserCtx", reflect.TypeOf((*MockAuthRedis)(nil).DeleteUserCtx), ctx, key)
}

// GetByIDCtx mocks base method.
func (m *MockAuthRedis) GetByIDCtx(ctx context.Context, key string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDCtx", ctx, key)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDCtx indicates an expected call of GetByIDCtx.
func (mr *MockAuthRedisMockRecorder) GetByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDCtx", reflect.TypeOf((*MockAuthRedis)(nil).GetByIDCtx), ctx, key)
}

// SetUserCtx mocks base method.
func (m *MockAuthRedis) SetUserCtx(ctx context.Context, key string, seconds int, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCtx", ctx, key, seconds, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCtx indicates an expected call of SetUserCtx.
func (mr *MockAuthRedisMockRecorder) SetUserCtx(ctx, key, seconds, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCtx", reflect.TypeOf((*MockAuthRedis)(nil).SetUserCtx), ctx, key, seconds, user)
}

// MockSessionredis is a mock of Sessionredis interface.
type MockSessionredis struct {
	ctrl     *gomock.Controller
	recorder *MockSessionredisMockRecorder
}

// MockSessionredisMockRecorder is the mock recorder for MockSessionredis.
type MockSessionredisMockRecorder struct {
	mock *MockSessionredis
}

// NewMockSessionredis creates a new mock instance.
func NewMockSessionredis(ctrl *gomock.Controller) *MockSessionredis {
	mock := &MockSessionredis{ctrl: ctrl}
	mock.recorder = &MockSessionredisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionredis) EXPECT() *MockSessionredisMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionredis) CreateSession(ctx context.Context, session *entity.Session, expire int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionredisMockRecorder) CreateSession(ctx, session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionredis)(nil).CreateSession), ctx, session, expire)
}

// DeleteSessionByID mocks base method.
func (m *MockSessionredis) DeleteSessionByID(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByID", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByID indicates an expected call of DeleteSessionByID.
func (mr *MockSessionredisMockRecorder) DeleteSessionByID(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByID", reflect.TypeOf((*MockSessionredis)(nil).DeleteSessionByID), ctx, sessionID)
}

// GetSessionByID mocks base method.
func (m *MockSessionredis) GetSessionByID(ctx context.Context, sessionID string) (*entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, sessionID)
	ret0, _ := ret[0].(*entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessionredisMockRecorder) GetSessionByID(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessionredis)(nil).GetSessionByID), ctx, sessionID)
}
